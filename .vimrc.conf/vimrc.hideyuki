" add by hideyuki on 2014/08/23
  NeoBundle 'tyru/caw.vim.git'

" caw.vim added by hideyuki
nmap <Leader>c <Plug>(caw:I:toggle)
vmap <Leader>c <Plug>(caw:I:toggle)

"
NeoBundle 'Lokaltog/powerline-fontpatcher'
NeoBundle 'alpaca-tc/alpaca_powertabline'
NeoBundle 'bling/vim-airline'
" NeoBundle 'Lokaltog/vim-powerline'

let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
" let g:airline_symbols.branch = ''
" let g:airline_symbols.readonly = ''
" let g:airline_symbols.linenr = ''

NeoBundle 'mbbill/undotree'

" undotree.vim
" [?]でヘルプ。[¥], [u]でundo履歴
" http://vimblog.com/blog/2012/09/02/undotree-dot-vim-display-your-undo-history-in-a-graph/
" https://github.com/r1chelt/dotfiles/blob/master/.vimrc
nmap <Leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle = 1
" let g:undotree_SplitLocation = 'topleft'
let g:undotree_SplitWidth = 35
let g:undotree_diffAutoOpen = 1
let g:undotree_diffpanelHeight = 25
let g:undotree_RelativeTimestamp = 1
let g:undotree_TreeNodeShape = '*'
let g:undotree_HighlightChangedText = 1
let g:undotree_HighlightSyntax = "UnderLined"

if has('persistent_undo')
  set undodir=~/.vim/undo
  set undofile
endif

" NeoBundle 'rhysd/vim-clang-format'

set cursorline
set cursorcolumn
highlight CursorLine cterm=NONE

" augroup vimrc-auto-cursorline
"     autocmd!
"     autocmd CursorMoved, CursorMovedI * call Auto_cursorline('CursorMoved')
"     autocmd CursorHold, CursorHoldI * call Auto_cursorline('CursorHold')
"     autocmd WinEnter * call Auto_cursorline('WinEnter')
"     autocmd WinLeave * call Auto_cursorline('WinLeave')
"
"     let g:cursorline_lock = 0
"     function! Auto_cursorline(event)
"         if a:event ==# 'WinEnter'
"             setlocal cursorline
"             setlocal cursorcolumn
"             let g:cursorline_lock = 2
"         elseif a:event ==# 'WinLeave'
"             setlocal nocursorline
"             setlocal nocursorcolumn
"         elseif a:event ==# 'CursorMoved'
"             if g:cursorline_lock
"                 if 1 < g:cursorline_lock
"                     let g:cursorline_lock = 1
"                 else
"                     setlocal nocursorline
"                     setlocal nocursorcolumn
"                     let g:cursorline_lock = 0
"                 endif
"             endif
"         elseif a:event ==# 'CursorHold'
"             setlocal cursorline
"             setlocal cursorcolumn
"             let g:cursorline_lock = 1
"         endif
"     endfunction
" augroup END

